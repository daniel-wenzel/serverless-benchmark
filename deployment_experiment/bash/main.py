import os
import json
import subprocess
from time import time
import shutil

GCP_PROJECT = "serverless-test-192109"
GCP_CREDENTIALS_FILE = "serverless-test-1f7b50db4823.json"
AWS_CREDENTIALS_FILE = "aws-creds.json"

N_TESTS_FOR_EACH_AMOUNT = 1
CLEAR_TEST_FOLDERS = False

AWS_GITIGNORE = """# package directories
node_modules
jspm_packages

# Serverless directories
.serverless
cred"""
GCP_GITIGNORE = """# Serverless
.serverless
.env
tmp
.coveralls.yml

# Google
keyfile.json

# Logs
*.log

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directory
# https://www.npmjs.org/doc/misc/npm-faq.html#should-i-check-my-node_modules-folder-into-git
node_modules

# IDE
**/.idea

# OS
.DS_Store
.tmp
"""

GCP_PACKAGE_JSON = """{
  "name": "google-nodejs",
  "version": "0.1.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1"
  },
  "author": "serverless.com",
  "license": "MIT",
  "dependencies": {
    "serverless-google-cloudfunctions": "^1.1.0"
  }
}
"""

AWS_TEMPLATE = """'use strict';

{FNS}"""

AWS_TEMPLATE_FN = """
module.exports.{NAME} = (event, context, callback) => {{
  const response = {{
    statusCode: 200,
    headers: {{
      'Access-Control-Allow-Origin': '*', 
    }},
    body: 'Hello World from function {NAME}!',
  }};

  callback(null, response);
}};
"""

GCP_TEMPLATE = """'use strict';

{FNS}"""

GCP_TEMPLATE_FN = """
exports.{NAME} = (request, response) => {{
  response.status(200).send('Hello World from function {NAME}!');
}};
"""

GCP_YAML_TEMPLATE = """service: gcf-nodejs

provider:
  name: google
  runtime: nodejs
  project: {PROJ}
  credentials: {CRED}

plugins:
  - serverless-google-cloudfunctions

package:
  exclude:
    - node_modules/**
    - .gitignore
    - .git/**

functions:{FNS}
"""

GCP_YAML_FN_TEMPLATE = """
  {NAME}:
    handler: {NAME}
    events:
      - http: path"""

AWS_YAML_TEMPLATE = """
service: serverless-hello-world

provider:
  name: aws
  runtime: nodejs6.10

functions:{FNS}
"""

AWS_YAML_FN_TEMPLATE = """
  {NAME}:
    handler: handler.{NAME}
    events:
      - http:
          path: {NAME}
          method: get
          cors: true"""

if __name__ == '__main__':
    test_id = int(time())

    # 1, 2, 4, 8, 16, 32, ..., 1024
    amounts_of_functions = map(lambda x: x, range(1, 2, 1))
    aws_creds = os.path.join(os.path.dirname(__file__), '..', AWS_CREDENTIALS_FILE)
    gcp_creds = os.path.join(os.path.dirname(__file__), '..', GCP_CREDENTIALS_FILE)

    test_folder = os.path.join(os.path.dirname(__file__), '..', "test-%s" % test_id)
    os.makedirs(test_folder)
    results_file_name = os.path.join(test_folder, 'results.csv')

    assert os.path.exists(test_folder), "The test folder %s could not get created" % test_folder
    assert os.path.exists(aws_creds), "The AWS credentials file %s does not exist" % aws_creds
    assert os.path.exists(gcp_creds), "The GCP credentials file %s does not exist" % gcp_creds
    assert os.path.isfile(aws_creds), "The AWS credentials file %s is no file" % aws_creds
    assert os.path.isfile(gcp_creds), "The GCP credentials file %s is no file" % gcp_creds

    results_file = open(results_file_name, 'w+')
    # write results header
    results_file.write("%s,%s,%s\n" % ("amount_of_functions", "aws_times", "gcp_times"))

    aws_creds_json = json.load(open(aws_creds))
    os.environ['AWS_ACCESS_KEY_ID'] = aws_creds_json['AWS_ACCESS_KEY_ID']
    os.environ['AWS_SECRET_ACCESS_KEY'] = aws_creds_json['AWS_SECRET_ACCESS_KEY']

    for current_amount_of_function in amounts_of_functions:
        aws_folder = os.path.join(os.path.dirname(__file__), '..', "test-%s" % test_id,
                                  "N%s" % current_amount_of_function, 'serverless-aws')
        gcp_folder = os.path.join(os.path.dirname(__file__), '..', "test-%s" % test_id,
                                  "N%s" % current_amount_of_function, 'serverless-gcp')
        os.makedirs(aws_folder)
        os.makedirs(gcp_folder)

        assert os.path.exists(aws_folder), "The AWS project folder %s does not exist" % aws_folder
        assert os.path.exists(gcp_folder), "The GCP project folder %s does not exist" % gcp_folder

        # generate file with <current_amount_of_function> functions
        # we have to use different templates for functions as the signatures are not identical
        print("*******************************************")
        print("***** generating projects with %s functions" % current_amount_of_function)
        gcp_functions = ""
        gcp_declarations = ""
        aws_functions = ""
        aws_declarations = ""
        for i in range(current_amount_of_function):
            function_name = "fn%s" % i
            gcp_functions += GCP_TEMPLATE_FN.format(NAME=function_name)
            gcp_declarations += GCP_YAML_FN_TEMPLATE.format(NAME=function_name)
            aws_functions += AWS_TEMPLATE_FN.format(NAME=function_name)
            aws_declarations += AWS_YAML_FN_TEMPLATE.format(NAME=function_name)

        gcp_index_js = GCP_TEMPLATE.format(FNS=gcp_functions)
        gcp_serverless_yaml = GCP_YAML_TEMPLATE.format(FNS=gcp_declarations, CRED=gcp_creds, PROJ=GCP_PROJECT)
        aws_handler_js = AWS_TEMPLATE.format(FNS=aws_functions)
        aws_serverless_yaml = AWS_YAML_TEMPLATE.format(FNS=aws_declarations)

        f__aws_handler_js = open(os.path.join(aws_folder, 'handler.js'), 'w+')
        f__aws_serverless_yaml = open(os.path.join(aws_folder, 'serverless.yml'), 'w+')
        f__aws_gitignore = open(os.path.join(aws_folder, '.gitignore'), 'w+')

        f__gcp_index_js = open(os.path.join(gcp_folder, 'index.js'), 'w+')
        f__gcp_serverless_yaml = open(os.path.join(gcp_folder, 'serverless.yml'), 'w+')
        f__gcp_gitignore = open(os.path.join(gcp_folder, '.gitignore'), 'w+')
        f__gcp_package_json = open(os.path.join(gcp_folder, 'package.json'), 'w+')

        f__aws_handler_js.write(aws_handler_js)
        f__aws_handler_js.close()

        f__aws_serverless_yaml.write(aws_serverless_yaml)
        f__aws_serverless_yaml.close()

        f__aws_gitignore.write(AWS_GITIGNORE)
        f__aws_gitignore.close()

        f__gcp_index_js.write(gcp_index_js)
        f__gcp_index_js.close()

        f__gcp_serverless_yaml.write(gcp_serverless_yaml)
        f__gcp_serverless_yaml.close()

        f__gcp_gitignore.write(GCP_GITIGNORE)
        f__gcp_gitignore.close()

        f__gcp_package_json.write(GCP_PACKAGE_JSON)
        f__gcp_package_json.close()

        aws_times = []
        gcp_times = []
        # execute the deploy commands with measuring the time needed - each 10 times
        for i in range(N_TESTS_FOR_EACH_AMOUNT):
            # start with AWS
            os.chdir(aws_folder)
            d1 = time()
            subprocess.call('serverless deploy', shell=True)
            aws_time = time() - d1
            aws_times.append(aws_time)

            # deploy gcp
            os.chdir(gcp_folder)
            subprocess.call('npm install', shell=True)
            d1 = time()
            subprocess.call('serverless deploy', shell=True)
            gcp_time = time() - d1
            gcp_times.append(gcp_time)

        # store times
        results_file.write(
            "%s,%s,%s\n" % (
                current_amount_of_function, '~'.join(map(str, aws_times)), '~'.join(map(str, gcp_times))))
        results_file.flush()
        if CLEAR_TEST_FOLDERS:
            shutil.rmtree(os.path.join(os.path.dirname(__file__), '..', "test-%s" % test_id,
                                       "N%s" % current_amount_of_function), ignore_errors=True)

    results_file.close()
